service: tb365-converter-api

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    TB365_BUCKET: tb365-designs-${self:provider.stage}
    API_TEMPLATE_BUCKET: apitemplate-exports-${self:provider.stage}
    DEV_BUCKET: TemplateBuilder365-${self:provider.stage}
    # Removed API_KEY - now using Cognito JWT
    NODE_ENV: ${self:provider.stage}
    OUTPUT_MODE: ${env:OUTPUT_MODE, 'response-only'}
    LOCAL_OUTPUT_DIR: ${env:LOCAL_OUTPUT_DIR, '/tmp/test-output'}
    COGNITO_USER_POOL_ID: us-east-1_RIOPGg1Cq
    COGNITO_CLIENT_ID: 2addji24p0obg5sqedgise13i4
    PROJECT_VERSION_RETENTION: ${env:PROJECT_VERSION_RETENTION, '3'}
  httpApi:
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_RIOPGg1Cq
        audience:
          - 2addji24p0obg5sqedgise13i4
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::tb365-designs-${self:provider.stage}/*"
        - "arn:aws:s3:::apitemplate-exports-${self:provider.stage}/*"
        - "arn:aws:s3:::TemplateBuilder365-${self:provider.stage}/*"
        - "arn:aws:s3:::templatebuilder365-user-data/*"
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - "arn:aws:s3:::tb365-designs-${self:provider.stage}"
        - "arn:aws:s3:::apitemplate-exports-${self:provider.stage}"
        - "arn:aws:s3:::TemplateBuilder365-${self:provider.stage}"
        - "arn:aws:s3:::templatebuilder365-user-data"

functions:
  convertTb365ToApiTemplate:
    handler: functions/tb365-converter.handler
    timeout: 30
    memorySize: 512
    events:
      - httpApi:
          path: /convert
          method: post
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - POST
              - OPTIONS
      - httpApi:
          path: /convert/{id}
          method: get
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - GET
              - OPTIONS
      - httpApi:
          path: /output-config
          method: get
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - GET
              - OPTIONS
      - httpApi:
          path: /output-config
          method: post
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - POST
              - OPTIONS

  # Project Management Function
  projectManager:
    handler: functions/project-manager.handler
    timeout: 30
    memorySize: 512
    events:
      - httpApi:
          path: /api/projects/save
          method: post
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - POST
              - OPTIONS
      - httpApi:
          path: /api/projects/list
          method: get
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - GET
              - OPTIONS
      - httpApi:
          path: /api/projects/load/{name}
          method: get
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - GET
              - OPTIONS
      - httpApi:
          path: /api/projects/{name}
          method: delete
          authorizer:
            name: cognitoAuthorizer
          cors:
            allowOrigin: '*'
            allowHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
            allowMethods:
              - DELETE
              - OPTIONS

  healthCheck:
    handler: functions/tb365-converter.health
    events:
      - httpApi:
          path: /health
          method: get

  projectHealthCheck:
    handler: functions/project-manager.health
    events:
      - httpApi:
          path: /api/projects/health
          method: get

resources:
  Resources:
    Tb365DesignsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tb365-designs-${self:provider.stage}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    ApiTemplateExportsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: apitemplate-exports-${self:provider.stage}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    DevBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: TemplateBuilder365-${self:provider.stage}
        VersioningConfiguration:
          Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: HttpApi
      Export:
        Name: ${self:service}-${self:provider.stage}-HttpApiId
    
    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - HttpApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-HttpApiRootResourceId
    
    ServiceEndpoint:
      Description: URL of the service endpoint
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: HttpApi
            - '.execute-api.'
            - ${self:provider.region}
            - '.amazonaws.com'

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    host: 0.0.0.0